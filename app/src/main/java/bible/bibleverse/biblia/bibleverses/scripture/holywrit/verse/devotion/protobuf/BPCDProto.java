// Generated by the protocol buffer compiler.  DO NOT EDIT!

package bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf;

public final class BPCDProto {
  private BPCDProto() {}
  public static final class BPCD extends
      com.google.protobuf.micro.MessageMicro {
    public BPCD() {}
    
    // optional string cateName = 1;
    public static final int CATENAME_FIELD_NUMBER = 1;
    private boolean hasCateName;
    private String cateName_ = "";
    public String getCateName() { return cateName_; }
    public boolean hasCateName() { return hasCateName; }
    public BPCD setCateName(String value) {
      hasCateName = true;
      cateName_ = value;
      return this;
    }
    public BPCD clearCateName() {
      hasCateName = false;
      cateName_ = "";
      return this;
    }
    
    // optional int32 plansCount = 2;
    public static final int PLANSCOUNT_FIELD_NUMBER = 2;
    private boolean hasPlansCount;
    private int plansCount_ = 0;
    public int getPlansCount() { return plansCount_; }
    public boolean hasPlansCount() { return hasPlansCount; }
    public BPCD setPlansCount(int value) {
      hasPlansCount = true;
      plansCount_ = value;
      return this;
    }
    public BPCD clearPlansCount() {
      hasPlansCount = false;
      plansCount_ = 0;
      return this;
    }
    
    // repeated .bean.BP list = 3;
    public static final int LIST_FIELD_NUMBER = 3;
    private java.util.List<bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP> list_ =
      java.util.Collections.emptyList();
    public java.util.List<bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP> getListList() {
      return list_;
    }
    public int getListCount() { return list_.size(); }
    public bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP getList(int index) {
      return list_.get(index);
    }
    public BPCD setList(int index, bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP value) {
      if (value == null) {
        throw new NullPointerException();
      }
      list_.set(index, value);
      return this;
    }
    public BPCD addList(bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP value) {
      if (value == null) {
        throw new NullPointerException();
      }
      if (list_.isEmpty()) {
        list_ = new java.util.ArrayList<bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP>();
      }
      list_.add(value);
      return this;
    }
    public BPCD clearList() {
      list_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final BPCD clear() {
      clearCateName();
      clearPlansCount();
      clearList();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasCateName()) {
        output.writeString(1, getCateName());
      }
      if (hasPlansCount()) {
        output.writeInt32(2, getPlansCount());
      }
      for (bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP element : getListList()) {
        output.writeMessage(3, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasCateName()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getCateName());
      }
      if (hasPlansCount()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getPlansCount());
      }
      for (bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP element : getListList()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(3, element);
      }
      cachedSize = size;
      return size;
    }
    
    public BPCD mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setCateName(input.readString());
            break;
          }
          case 16: {
            setPlansCount(input.readInt32());
            break;
          }
          case 26: {
            bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP value = new bible.bibleverse.biblia.bibleverses.scripture.holywrit.verse.devotion.protobuf.BPProto.BP();
            input.readMessage(value);
            addList(value);
            break;
          }
        }
      }
    }
    
    public static BPCD parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (BPCD) (new BPCD().mergeFrom(data));
    }
    
    public static BPCD parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (BPCD) (new BPCD().mergeFrom(input));
    }
    
  }
  
}
